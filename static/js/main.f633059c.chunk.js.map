{"version":3,"sources":["Flashcard.js","FlashcardList.js","categoryData.js","questionsData.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","useEffect","frontHeight","current","getBoundingClientRect","backHeight","Math","max","question","answer","options","className","style","ref","map","option","key","onClick","a","alert","FlashcardList","flashcards","id","triviaCategories","questions","sagemakerAlgorithms","modelTypes","modelPurposes","getModelPurposeQuestion","str","getSubsetArrayExcludeOne","array","notThis","subset","random","sort","b","slice","randomSample","filter","e","createQuestions","i","length","j","floor","shuffle","forEach","element","push","name","modelType","incorrect_answers","purpose","App","setFlashcards","categories","setCategories","categoryEl","decodeString","textArea","document","createElement","innerHTML","value","onSubmit","preventDefault","qs","q","categoryId","parseInt","questionItem","index","correct_answer","Date","now","htmlFor","category","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f633059c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Flashcard({ flashcard }) {\n  const [flip, setFlip] = useState(false)\n  const [height, setHeight] = useState('initial')\n\n  const frontEl = useRef()\n  const backEl = useRef()\n\n  function setMaxHeight() {\n    const frontHeight = frontEl.current.getBoundingClientRect().height\n    const backHeight = backEl.current.getBoundingClientRect().height\n    //console.log(\"setMaxHeight\" + frontHeight + \" : \" + backHeight)\n    setHeight(Math.max(frontHeight, backHeight, 100))\n  }\n\n  function checkAnswer(a) {\n    //console.log(\"your answer: \" , a.option)\n    //console.log(\"correct answer: \" + flashcard.answer)\n    flashcard.answer === a.option ? alert(\"yep, that's correct!\") : alert(\"nope, that's incorrect\")\n  }\n\n  useEffect(setMaxHeight, [flashcard.question, flashcard.answer, flashcard.options])\n  // this is messing things up! commenting\n  /*useEffect(() => {\n    window.addEventListener('resize', setMaxHeight)\n    return () => window.removeEventListener('resize', setMaxHeight)\n  }, [])*/\n/* funkiness on the height of these, hence the + 6 ? */\n  return (\n    <div\n      className={`card ${flip ? 'flip' : ''}`}\n      style={{ height: height }}\n    >   \n      <div className=\"front\" style={{ height: height + 6}} ref={frontEl}>\n        {flashcard.question}\n        <div className=\"flashcard-options\">\n          {flashcard.options.map(option => {\n            return <div className=\"flashcard-option\" key={option}>\n            <button className=\"btn option-btn\" onClick={() => checkAnswer({option})}>{option}</button>\n            </div>\n          })}\n        </div>\n        <button className=\"btn view-btn\" onClick={() => setFlip(!flip)} >see answer</button>\n      </div>\n      <div className=\"back\" onClick={() => setFlip(!flip)} style={{ height: height + 6 }} ref={backEl}>{flashcard.answer}</div>\n    </div>\n  )\n}\n","import React from 'react'\nimport Flashcard from './Flashcard';\n\nexport default function FlashcardList({ flashcards }) {\n  return (\n    <div className=\"card-grid\">\n      {flashcards.map(flashcard => {\n        return <Flashcard flashcard={flashcard} key={flashcard.id} />\n      })}\n    </div>\n  )\n}\n","export const triviaCategories = [\n\t{\n\t\t\"id\": 2,\n\t\t\"name\": \"SageMaker Algorithms: Purpose (e.g. image classification)\"\n\t},\n\t{\n\t\t\"id\": 1,\n\t\t\"name\": \"SageMaker Algorithms: Model Type (e.g. CNN)\"\n\t},\n\t{\n\t\t\"id\": 3,\n\t\t\"name\": \"General Machine Learning\"\n\t}]","export var questions = []\n\nconst subsetSize = 6\nlet sagemakerAlgorithms = [\n    {\"name\" : \"Linear Learner\", \"modelType\":\"linear regression\" , \"purpose\": \"regression or classification\", \"processor\" : \"cpu\"},\n    {\"name\" : \"XGboost\", \"modelType\":\"decision tree(s)\" , \"purpose\": \"regression or classification\", \"processor\" : \"cpu\"},\n    {\"name\" : \"Seq2Seq\", \"modelType\":\"RNNs and CNNs with attention\" , \"purpose\": \"translation, summarization, speech to text\", \"processor\" : \"gpu\"},\n    {\"name\" : \"DeepAR\", \"modelType\":\"RNN\" , \"purpose\": \"forecast one dimensional time series\", \"processor\" : \"cpu or gpu\"},\n    {\"name\" : \"BlazingText\", \"modelType\":\"word2vec and text classification\" , \"purpose\": \"text classification\", \"processor\" : \"cpu or gpu\"},\n    {\"name\" : \"Object2Vec\", \"modelType\":\"object2vec\" , \"purpose\": \"determine how similar objects are to each other\", \"processor\" : \"cpu or gpu\"},\n    {\"name\" : \"Object Detection\", \"modelType\":\"CNN\" , \"purpose\": \"identify object in image and identify bounding boxes\", \"processor\" : \"gpu\"},\n    {\"name\" : \"Image Classification\", \"modelType\":\"ResNet CNN\" , \"purpose\": \"assign labels to image\", \"processor\" : \"gpu\"},\n    {\"name\" : \"Semantic Segmentation\", \"modelType\":\"MXNet Gluon and Gluon CV\" , \"purpose\": \"pixel level object classification\", \"processor\" : \"gpu\"},\n    {\"name\" : \"Random Cut Forest\", \"modelType\":\"decision tree(s)\" , \"purpose\": \"anomaly detection\", \"processor\" : \"cpu\"},\n    {\"name\" : \"Neural Topic Model\", \"modelType\":\"neural topic model\" , \"purpose\": \"document topic classification\", \"processor\" : \"gpu\"},\n    {\"name\" : \"LDA: Latent Dirichlet Allocation\", \"modelType\":\"latent dirichlet allocation\" , \"purpose\": \"document topic classification\", \"processor\" : \"gpu\"},\n    {\"name\" : \"K-Nearest-Neighbors\", \"modelType\":\"KNN\" , \"purpose\": \"regression or classification\", \"processor\" : \"cpu or gpu\"},\n    {\"name\" : \"K-Means Clustering\", \"modelType\":\"k-Means\" , \"purpose\": \"unsupervised clustering\", \"processor\" : \"cpu\"},\n    {\"name\" : \"Principal Component Analysis (PCA)\", \"modelType\":\"principal component analysis\" , \"purpose\": \"dimensionality reduction\", \"processor\" : \"cpu\"},\n    {\"name\" : \"Factorization Machines\", \"modelType\":\"factorization machines\" , \"purpose\": \"recommender systems\", \"processor\" : \"cpu or gpu\"},\n    {\"name\" : \"IP insights\", \"modelType\":\"CNN\" , \"purpose\": \"finding fishy behaviour in your weblogs\", \"processor\" : \"cpu or gpu\"},\n    {\"name\" : \"Reinforcement Learning\", \"modelType\":\"Q-learning\" , \"purpose\": \"learning by assigning rewards/penalties for states in the system\", \"processor\" : \"cpu or gpu\"}\n]\n\nconst processors = [\n    \"cpu\",\n    \"gpu\",\n    \"cpu or gpu\"\n]\n\nconst modelTypes = [\n    \"linear regression\",\n    \"logistic regression\",\n    \"decision tree(s)\",\n    \"multiple regression\",\n    \"CNN\",\n    \"ResNet CNN\",\n    \"RNN\",\n    \"RNNs and CNNs with attention\",\n    \"MXNet Gluon and Gluon CV\",\n    \"Q-learning\",\n    \"neural topic model\",\n    \"latent dirichlet allocation\",\n    \"factorization machines\",\n    \"KNN\",\n    \"k-Means\",\n    \"principal component analysis\",\n    \"word2vec and text classification\",\n    \"object2vec\",\n    \"none of the above\"\n]\n\nconst modelPurposes = [\n    \"regression\",\n    \"classification\",\n    \"regression or classification\",\n    \"translation, summarization, speech to text\",\n    \"forecast time series\",\n    \"text classification\",\n    \"determine how similar objects are to each other\",\n    \"identify object in image and identify bounding boxes\",\n    \"assign labels to image\",\n    \"pixel level object classification\",\n    \"anomaly detection\",\n    \"document topic classification\",\n    \"unsupervised clustering\",\n    \"dimensionality reduction\",\n    \"recommender systems\",\n    \"finding fishy behaviour in your weblogs\",\n    \"learning by assigning rewards/penalties for states in the system\"\n]\n\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nfunction getModelTypeQuestion(str){\n    return \"What type of model/algorithm does \" + str + \" implement?\"\n}\n\nfunction getModelPurposeQuestion(str){\n    return \"What is the purpose of \" + str + \"?\"\n}\n\nfunction getArrayExcludeOne (array,notThis){\n    let arr =  array.filter(e => e !== notThis);\n    return arr\n}\n\nfunction getSubsetArrayExcludeOne(array,notThis,subset){\n\n    var randomSample = function(array,subset){ return array.map(a => [a,Math.random()]).sort((a,b) => {return a[1] < b[1] ? -1 : 1;}).slice(0,subset).map(a => a[0]); }\n    let arr = randomSample(array,subset)\n    return arr.filter(e => e !== notThis);\n}\n\n\nexport function createQuestions(){\nquestions = []\nsagemakerAlgorithms = shuffle(sagemakerAlgorithms) \nsagemakerAlgorithms.forEach((element) => {\n    questions.push(\n        {\n            \"categoryId\": 1,\n            \"question\" : getModelTypeQuestion(element.name),\n            \"correct_answer\": element.modelType,\n            incorrect_answers: getSubsetArrayExcludeOne(modelTypes,element.modelType,subsetSize)\n\n\n        },\n        {\n            \"categoryId\": 2,\n            \"question\" : getModelPurposeQuestion(element.name),\n            \"correct_answer\": element.purpose,\n            incorrect_answers: getSubsetArrayExcludeOne(modelPurposes,element.purpose,subsetSize)\n\n\n        }\n    )\n})\n}","import React, { useState, useEffect, useRef } from 'react';\nimport FlashcardList from './FlashcardList';\nimport './App.css'\nimport { triviaCategories } from \"./categoryData\";\nimport { questions,createQuestions } from \"./questionsData\";\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([])\n  const [categories, setCategories] = useState([])\n  const [attemptCount, setAttemptCount] = useState(0)\n  const [correctCount, setCorrectCount] = useState(0)\n  const categoryEl = useRef()\n\n  useEffect(() => {\n        setCategories(triviaCategories)\n  }, [])\n\n  function decodeString(str) {\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML= str\n    return textArea.value\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    createQuestions()\n    // get all questions that have this category ID\n    let qs = questions.filter((q)=>{return q.categoryId === parseInt(categoryEl.current.value)})\n    //console.log(qs)\n\n    setFlashcards(qs.map((questionItem, index) => {\n      const answer = decodeString(questionItem.correct_answer)\n      const options = [\n        ...questionItem.incorrect_answers.map(a => decodeString(a)),\n        answer\n      ]\n      return {\n        id: `${index}-${Date.now()}`,\n        question: decodeString(questionItem.question),\n        answer: answer,\n        options: options.sort(() => Math.random() - .5)\n      }\n    }))\n  }\n/**         <div className=\"score\" id=\"score-container\"><div id=\"score-title\">Score:</div><div id=\"score-correct\">2</div>/<div id=\"score-total\">{attemptCount}</div></div> */\n\n  return (\n    <>\n      <div id=\"header\">\n        <h2>AWS ML Cert Exam Prep</h2>\n\n      </div>\n      <form className=\"form-header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select id=\"category\" ref={categoryEl}>\n            {categories.map(category => {\n              return <option value={category.id} key={category.id}>{category.name}</option>\n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <button className=\"btn\">Generate</button>\n        </div>\n      </form>\n      <div className=\"container\">\n        <FlashcardList flashcards={flashcards} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}